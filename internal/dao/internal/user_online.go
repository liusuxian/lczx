// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// UserOnlineDao is the data access object for table user_online.
type UserOnlineDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns UserOnlineColumns // columns contains all the column names of Table for convenient usage.
}

// UserOnlineColumns defines and stores column names for table user_online.
type UserOnlineColumns struct {
	Id       string // 访问ID
	Uuid     string // 用户标识
	Token    string // 用户token
	Passport string // 登录账号
	Browser  string // 浏览器类型
	Os       string // 操作系统
	Ip       string // 登录ip
	Time     string // 登录时间
}

//  userOnlineColumns holds the columns for table user_online.
var userOnlineColumns = UserOnlineColumns{
	Id:       "id",
	Uuid:     "uuid",
	Token:    "token",
	Passport: "passport",
	Browser:  "browser",
	Os:       "os",
	Ip:       "ip",
	Time:     "time",
}

// NewUserOnlineDao creates and returns a new DAO object for table data access.
func NewUserOnlineDao() *UserOnlineDao {
	return &UserOnlineDao{
		group:   "default",
		table:   "user_online",
		columns: userOnlineColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserOnlineDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *UserOnlineDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *UserOnlineDao) Columns() UserOnlineColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *UserOnlineDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserOnlineDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserOnlineDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
